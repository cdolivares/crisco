// Generated by CoffeeScript 1.4.0

/*
  This stub initializes the application state...also allows state serialization
  and deserialization so that clients can easily use and inspect the state of
  this action class instance.
*/


(function() {
  var BaseResource;

  BaseResource = (function() {

    function BaseResource() {}

    BaseResource.register = function(name, middleware) {
      this._m = this._m || {};
      return this._m[name] = middleware;
    };

    BaseResource.clone = function() {
      var f;
      f = function() {};
      f._routes = [];
      f._d = "default";
      /*
            Before and After hooks
      */

      f.before = function(beforeHooks) {
        return this._bh = beforeHooks;
      };
      f.after = function(afterHooks) {
        return this._ah = afterHooks;
      };
      f.tag = function(tag) {
        return this._t = tag;
      };
      f.app = function() {};
      f.domain = function(d) {
        return this._d = d;
      };
      f.app.get = function(route, routeHandler) {
        /*
                store app routes as tuples with
                {
                  tag: "SomeTag",
                  route: "SomeRoute",
                  handler: "SomeHandler"
                }
        */
        f._routes.push({
          tag: this._t,
          route: route,
          handler: routeHandler
        });
        return f._reset();
      };
      f.app.post = function(route, routeHandler) {
        f._routes.push({
          tag: this._t,
          route: route,
          handler: routeHandler
        });
        return f._reset();
      };
      f.app.put = function(route, routeHandler) {
        f._routes.push({
          tag: this._t,
          route: route,
          handler: routeHandler
        });
        return f._reset();
      };
      f.app.del = function(route, routeHandler) {
        f._routes.push({
          tag: this._t,
          route: route,
          handler: routeHandler
        });
        return f._reset();
      };
      f._reset = function() {
        return this._t = null;
      };
      f.serialize = function() {
        var o;
        o = {
          domain: f._d,
          beforeHooks: f._bh,
          afterHooks: f._ah,
          routes: f._routes
        };
        return o;
      };
      f.deserialize = function(conf) {
        this._d = conf.domain || this._d;
        this._bh = conf.beforeHooks || this._bh;
        this._ah = conf.afterHooks || this._ah;
        return this._routes = conf.routes || this._routes;
      };
      return f;
    };

    return BaseResource;

  })();

  module.exports = BaseResource;

}).call(this);
