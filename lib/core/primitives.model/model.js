// Generated by CoffeeScript 1.6.2
(function() {
  var CriscoModel, myAsync,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  myAsync = require("" + __dirname + "/../../helpers/async");

  /*
    Class: CriscoModel
  
    Provides resource routes with some
    model population convenience methods,
    access to the database layers.
  */


  CriscoModel = (function() {
    /*
    
      CLASS METHODS
    */

    /*
      Private Class Var Container
    */
    CriscoModel.__vars = {};

    /*
      Static Class Method: Config
    
      Deals with storing the application level
      configurations.
    */


    CriscoModel.config = function(appConfigs, domainConfigs, database) {
      this.__vars.configs = this.__vars.configs || {};
      this.__vars.configs.app = appConfigs;
      this.__vars.configs.domain = domainConfigs;
      return this.__vars.database = database;
    };

    /*
      Static Class Method: Init
    
      Deals with initializing a new instance of
      CriscoModel.  This understands how to initialize
      off a "req" object from express.
    
      @param - domain - A string representing the
               domain to initalize a new string
    
      @param -
    */


    CriscoModel.init = function(crisco, domain, req) {
      /*
        Eventually we'll also include logic to initialize
        and cache any shared resources between CriscoModel.
      */

      var cm, routeInfo;

      routeInfo = {
        route: _.extend(req.route, {
          url: req.url
        }),
        method: req.method,
        query: req.query,
        body: req.body
      };
      cm = new this(crisco, domain, this.__vars.database, routeInfo);
      return cm;
    };

    /*
      
      INSTANCE METHODS
    */


    /*
      Method: constructor
    
      @param - domain <String>, The current
      @param - database <Object>, and instance
               of the dojo database object.
      @param - routeInfo - an object containing
               information about this specific
               request
               Includes:
                    routeInfo =
                      route: {
                        Express Object from req.route: see 
                        http://expressjs.com/api.html#req.route for more info
                      } 
                      method: "GET|POST|PUT|DELETE"
                      query:  {queryString: Parameter}
                      body:   {body: Parameter}
               Query and/or body may not be defined
               depending on the HTTP Method used
                
                Example express req.route object:
                { 
                  path: '/user/:id?',
                  method: 'get',
                  callbacks: [ [Function] ],
                  keys: [ { name: 'id', optional: true } ],
                  regexp: /^\/user(?:\/([^\/]+?))?\/?$/i,
                  params: [ id: '12' ] 
                }
    */


    function CriscoModel(crisco, domain, database, routeInfo) {
      this.populate = __bind(this.populate, this);      this.__domain = domain;
      this.__database = database;
      this.__routeInfo = routeInfo;
      this.__cache = {};
    }

    /*
      Method: populate
    
      Populates a set of models based on model information
      sent from the client via HTTP.
    
      GETs are expected to follow restful conventions
      Eg.
        /collection1/:collection1_id/collection2/:collection2_id
        
        will return an object with the results
          {
            collection1: <MongooseModel>,
            collection2: <MongooseModel>
          }
    
        if the model can't be found then the collection will be
        undefined in the object.
    
      @param - name <String> - Optional. If passed in then
               only that collection will be populated. Can
               also be a comma-delimited list of collections
               eg. teachers,students,classes
      @param - clbk <Function> - (err, populatedObject)
    */


    CriscoModel.prototype.populate = function(name, clbk) {
      var finds, fnd, node, nodeManager, target, targets, _i, _len,
        _this = this;

      if (_.isFunction(name)) {
        targets = this.targets();
        clbk = name;
      } else {
        targets = _.intersection(name.split(','), this.targets());
      }
      fnd = function(primaryName, secondaryName) {
        return function(callback) {
          var drivers;

          drivers = _this.__database.drivers;
          return drivers[primaryName].findById(_this.getParam(secondaryName), function(err, obj) {
            if (err != null) {
              return callback(err, null);
            } else if (obj != null) {
              return callback(null, obj);
            } else {
              return callback(null, null);
            }
          });
        };
      };
      nodeManager = this.__database.nodeManager;
      finds = {};
      for (_i = 0, _len = targets.length; _i < _len; _i++) {
        target = targets[_i];
        node = nodeManager.find(target);
        if (node != null) {
          name = node.name;
          finds["" + target] = fnd(node.name, target);
        }
      }
      return myAsync.parallel(finds, function(err, results) {
        if (results != null) {
          return clbk(null, results);
        }
      });
    };

    /*
      getRoot
    
      Returns then root node for this request
      or NULL if it doesn't exist
    */


    CriscoModel.prototype.getRoot = function() {
      var node, t, _i, _len, _ref;

      _ref = this.targets();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        node = this.database.nodeManager.find(t);
        if (node.isRoot) {
          return node;
        }
      }
      return null;
    };

    /*
      Method: targets
    */


    CriscoModel.prototype.targets = function() {
      return _.reject(_.reject(this.__routeInfo.route.path.split('/'), function(r) {
        return r.indexOf(":") !== -1;
      }), function(r2) {
        return (r2.length < 1) || (r2 === 'api');
      }).reverse();
    };

    /*
      Method: getParam
    */


    CriscoModel.prototype.getParam = function(name) {
      var regexp;

      regexp = "\/" + name + "\/([^\/\?]+)";
      return this.__routeInfo.route.url.match(regexp)[1];
    };

    CriscoModel.prototype.__defineGetter__("database", function() {
      return this.__database;
    });

    return CriscoModel;

  })();

  module.exports = CriscoModel;

}).call(this);
