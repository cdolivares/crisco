// Generated by CoffeeScript 1.6.3
(function() {
  var CriscoAction;

  CriscoAction = (function() {
    /*
    
      CLASS METHODS
    */

    /*
      Private Class Var Container
    */

    CriscoAction.__vars = {};

    /*
      Static Class Method: Config
    
      Deals with storing the application level
      configurations.
    
      @param - appConfigs
    
      @param - domainConfigs
    
      @param - database
    */


    CriscoAction.config = function(appConfigs, domainConfigs, database) {
      this.__vars.configs = this.__vars.configs || {};
      this.__vars.configs.app = appConfigs;
      this.__vars.configs.domain = domainConfigs;
      return this.__vars.database = database;
    };

    /*
      Static Class Method: Init
    
      Deals with initializing a new instance of
      CriscoModel.  This understands how to initialize
      off a "req" object from express.
    
      @param - domain - A string representing the
               domain to initalize a new string
    
      @param -
    */


    CriscoAction.init = function(crisco, domain, routeInfo) {
      /*
        Eventually we'll also include logic to initialize
        and cache any shared resources between CriscoModel.
      */

      var cm;
      cm = new this(crisco, domain, this.__vars.database, routeInfo);
      return cm;
    };

    /*
      
      INSTANCE METHODS
    */


    /*
      Method: constructor
    
      @param - domain <String>, The current
      @param - database <Object>, and instance
               of the dojo database object.
      @param - routeInfo - an object containing
               information about this specific
               request
               Includes:
                    routeInfo =
                      route: {
                        Express Object from req.route: see 
                        http://expressjs.com/api.html#req.route for more info
                      } 
                      method: "GET|POST|PUT|DELETE"
                      query:  {queryString: Parameter}
                      body:   {body: Parameter}
               Query and/or body may not be defined
               depending on the HTTP Method used
                
                Example express req.route object:
                { 
                  path: '/user/:id?',
                  method: 'get',
                  callbacks: [ [Function] ],
                  keys: [ { name: 'id', optional: true } ],
                  regexp: /^\/user(?:\/([^\/]+?))?\/?$/i,
                  params: [ id: '12' ] 
                }
    */


    function CriscoAction(crisco, domain, database, routeInfo) {
      this.__domain = domain;
      this.__database = database;
      this.__routeInfo = routeInfo;
      this.__cache = {};
    }

    /*
      Method: log
      
      A configured logger instance for each domain.
      For now defer to default console.log
    */


    CriscoAction.prototype.log = function() {
      return console.log;
    };

    /*
      Method: error
    
      A configured error instance for each domain.
      For now defer to default console.error
    */


    CriscoAction.prototype.error = function() {
      return console.error;
    };

    /*
      Getters
    */


    CriscoAction.prototype.__defineGetter__("database", function() {
      return this.__database;
    });

    CriscoAction.prototype.__defineGetter__("body", function() {
      return this.__routeInfo.req.body;
    });

    /*
      req - An untouched Express.js req object.
    */


    CriscoAction.prototype.__defineGetter__("req", function() {
      return this.__routeInfo.req;
    });

    /*
      res - An untouched Express.js res object.
    */


    CriscoAction.prototype.__defineGetter__("res", function() {
      return this.__routeInfo.res;
    });

    return CriscoAction;

  })();

  module.exports = CriscoAction;

}).call(this);
