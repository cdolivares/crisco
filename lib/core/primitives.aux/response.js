// Generated by CoffeeScript 1.6.2
(function() {
  var Response, _;

  _ = require("underscore");

  Response = (function() {
    function Response(routeInfo) {
      this.__routeInfo = routeInfo;
      this.__cache = {};
      this.__status = 0;
      this.__message = null;
    }

    Response.prototype.pack = function(obj, override) {
      if (override == null) {
        override = false;
      }
      if (!_.isArray(obj)) {
        obj = [obj];
      }
      this.__cache.objs = this.__cache.objs || [];
      if (override) {
        this.__cache.objs = obj;
      } else {
        this.__cache.objs = this.__cache.objs.concat(obj);
      }
      return this;
    };

    Response.prototype.raw = function(obj) {
      if (!_.isArray(obj)) {
        obj = [obj];
      }
      this.__cache.raw = (this.__cache.raw || []).concat(obj);
      return this;
    };

    Response.prototype.success = function() {
      this.status(200);
      return this;
    };

    Response.prototype.status = function(s) {
      this.__status = s;
      return this;
    };

    Response.prototype.message = function(m) {
      this.__message = m;
      return this;
    };

    Response.prototype.empty = function() {
      this.__cache.objs = {};
      return this;
    };

    Response.prototype.send = function() {
      var a, o, obj, payload, _i, _len, _ref;

      if (this.__message != null) {
        return this.__routeInfo.res.json(this.__status, {
          message: this.__messsage
        });
      } else {
        this.__cache.payload = [];
        if (this.__cache.objs != null) {
          a = [];
          _ref = this.__cache.objs;
          for (_i = 0, _len = _ref.length; _i < _len; _i += 1) {
            obj = _ref[_i];
            o = obj.jsonify();
            a.push(o);
          }
          this.__cache.payload = this.__cache.payload.concat(a);
        }
        if (this.__cache.raw != null) {
          this.__cache.payload = this.__cache.payload.concat(this.__cache.raw);
        }
        payload = this.__cache.payload;
        if (this._sendOne()) {
          payload = payload.shift();
        }
        return this.__routeInfo.res.json(this.__status, {
          data: payload
        });
      }
    };

    Response.prototype._sendOne = function() {
      return this.__routeInfo.getOne || (this.__routeInfo.method === "POST" && this.__routeInfo.route.indexOf("/action") === -1) || (this.__routeInfo.method === "PUT");
    };

    Response.prototype.__defineGetter__('payload', function() {
      return {
        objs: this.__cache.objs,
        raw: this.__cache.raw
      };
    });

    return Response;

  })();

  module.exports = Response;

}).call(this);
