// Generated by CoffeeScript 1.6.2
(function() {
  var ApplicationInitializer, AttachmentMiddleware, AuthenticationMiddleware, BaseAction, BaseResource, BaseSchema, Crisco, FeatureFlags, Getter, Permission, PermissionMiddleware, _;

  BaseAction = require("" + __dirname + "/action/base");

  BaseResource = require("" + __dirname + "/resource/base");

  Getter = require("" + __dirname + "/../helpers/getter");

  _ = require("underscore");

  ApplicationInitializer = require("" + __dirname + "/initializers/app");

  BaseSchema = require("database").BaseSchema;

  /*
    Default Middleware
  */


  PermissionMiddleware = require("" + __dirname + "/middleware.default/permission");

  AuthenticationMiddleware = require("" + __dirname + "/middleware.default/authentication");

  AttachmentMiddleware = require("" + __dirname + "/middleware.default/attachment");

  FeatureFlags = require("" + __dirname + "/middleware.default/featureflags");

  /*
    Make default Database Permission object available
  */


  Permission = require("database").Permission;

  /*
    Class: Crisco
  
    Application class that exports application level functions.
  
    Also exposes enriched BaseAction and BaseResource classes.
  */


  Crisco = (function() {
    /*
      Method: constructor
    */
    function Crisco(config) {
      this.__config = config;
      _.defaults(this.__config, {
        schemas: {},
        plugins: {},
        actions: {},
        resources: {}
      });
      this.__customMiddleware = {};
      this.__configCallbacks = {};
    }

    /*
      Method: registerMiddleware
    
      Allows clients to registers middleware for use in action and route
      definitions.  For now each middleware module is registered for both
      actions and resources.
    */


    Crisco.prototype.registerMiddleware = function(name, middleware) {
      this.__customMiddleware[name] = middleware;
      BaseAction.register(name, middleware);
      return BaseResource.register(name, middleware);
    };

    /*
    */


    Crisco.prototype.options = function(config) {
      if (!arguments.length) {
        return this.__config;
      }
      return this.__config = config;
    };

    /*
      Method: configure
    
      A configure hook that allows the client to configure
      different parts of the application initialization
      process.
    
      For now, the only configuration type is "server"
    */


    Crisco.prototype.configure = function(type, clbk) {
      return this.__configCallbacks[type] = clbk;
    };

    Crisco.prototype.getMiddleware = function(name) {
      return this.__customMiddleware[name];
    };

    /*
      Method: use
    
      uses a plugin
    */


    Crisco.prototype.use = function(options) {
      var moduleType, modules, _i, _len, _ref, _results;

      if (options == null) {
        options = {};
      }
      if (this.__initialized) {
        throw new Error("cannot use a plugin after initialization");
      }
      _ref = Object.keys(this.__config);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        moduleType = _ref[_i];
        if (modules = options[moduleType]) {
          _results.push(_.extend(this.__config[moduleType], modules));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    /*
    */


    Crisco.prototype.start = function(clbk) {
      var app, config,
        _this = this;

      if (clbk == null) {
        clbk = function() {};
      }
      this.__initialized = true;
      config = this.__config;
      /*
        Register Default Middleware
          -Authentication
          -Permissions
      */

      this.registerMiddleware("verifyPermissions", PermissionMiddleware);
      this.registerMiddleware("authenticate", AuthenticationMiddleware);
      this.registerMiddleware("addAttachments", AttachmentMiddleware);
      this.registerMiddleware("verifyFlags", FeatureFlags);
      app = new ApplicationInitializer(this, config.actions, config.resources, config.schemas, config.plugins, config.dbSettings);
      return app.init(function(err, express) {
        return clbk(err, express);
      });
    };

    /*
      Convenience Getters
    */


    Crisco.prototype.__defineGetter__('BaseAction', function() {
      return BaseAction.clone(this);
    });

    Crisco.prototype.__defineGetter__('BaseResource', function() {
      return BaseResource.clone(this);
    });

    Crisco.prototype.__defineGetter__('BaseSchema', function() {
      return BaseSchema;
    });

    Crisco.prototype.__defineGetter__('appConfig', function() {
      return this.__config;
    });

    Crisco.prototype.__defineGetter__('configuration', function() {
      return this.__configCallbacks;
    });

    Crisco.prototype.__defineGetter__("Permission", function() {
      return Permission;
    });

    return Crisco;

  })();

  module.exports = Crisco;

}).call(this);
