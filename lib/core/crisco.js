// Generated by CoffeeScript 1.6.2
(function() {
  var ApplicationInitializer, AuthenticationMiddleware, BaseAction, BaseResource, BaseSchema, Crisco, Getter, Permission, PermissionMiddleware;

  BaseAction = require("" + __dirname + "/action/base");

  BaseResource = require("" + __dirname + "/resource/base");

  Getter = require("" + __dirname + "/../helpers/getter");

  ApplicationInitializer = require("" + __dirname + "/initializers/app");

  BaseSchema = require("database").BaseSchema;

  /*
    Default Middleware
  */


  PermissionMiddleware = require("" + __dirname + "/middleware.default/permission");

  AuthenticationMiddleware = require("" + __dirname + "/middleware.default/authentication");

  /*
    Make default Database Permission object available
  */


  Permission = require("database").Permission;

  /*
    Class: Crisco
  
    Application class that exports application level functions.
  
    Also exposes enriched BaseAction and BaseResource classes.
  */


  Crisco = (function() {
    /*
      Method: constructor
    */
    function Crisco(config) {
      this.__config = config;
      this.__customMiddleware = {};
      this.__configCallbacks = {};
      global.Crisco = this;
    }

    /*
      Method: registerMiddleware
    
      Allows clients to registers middleware for use in action and route
      definitions.  For now each middleware module is registered for both
      actions and resources.
    */


    Crisco.prototype.registerMiddleware = function(name, middleware) {
      this.__customMiddleware[name] = middleware;
      BaseAction.register(name, middleware);
      return BaseResource.register(name, middleware);
    };

    /*
    */


    Crisco.prototype.options = function(config) {
      if (!arguments.length) {
        return this.__config;
      }
      return this.__config = config;
    };

    /*
      Method: configure
    
      A configure hook that allows the client to configure
      different parts of the application initialization
      process.
    
      For now, the only configuration type is "server"
    */


    Crisco.prototype.configure = function(type, clbk) {
      return this.__configCallbacks[type] = clbk;
    };

    Crisco.prototype.getMiddleware = function(name) {
      return this.__customMiddleware[name];
    };

    Crisco.prototype.start = function(clbk) {
      var actions, app, config, dbSettings, plugins, resources, schemas,
        _this = this;

      config = this.__config;
      schemas = config.schemas || require(config.schemaPath);
      plugins = config.plugins || (new Getter(config.pluginPath)).get();
      dbSettings = config.dbSettings || require(config.dbSettingsPath);
      resources = config.resources || (new Getter(config.resourcePath)).get();
      actions = config.actions || (new Getter(config.actionsPath)).get();
      /*
        Register Default Middleware
          -Authentication
          -Permissions
      */

      this.registerMiddleware("verifyPermissions", PermissionMiddleware);
      this.registerMiddleware("authenticate", AuthenticationMiddleware);
      app = new ApplicationInitializer(actions, resources, schemas, plugins, dbSettings);
      return app.init(function(err, express) {
        return clbk(err, express);
      });
    };

    /*
      Convenience Getters
    */


    Crisco.prototype.__defineGetter__('BaseAction', function() {
      return BaseAction.clone();
    });

    Crisco.prototype.__defineGetter__('BaseResource', function() {
      return BaseResource.clone();
    });

    Crisco.prototype.__defineGetter__('BaseSchema', function() {
      return BaseSchema;
    });

    Crisco.prototype.__defineGetter__('appConfig', function() {
      return this.__config;
    });

    Crisco.prototype.__defineGetter__('configuration', function() {
      return this.__configCallbacks;
    });

    Crisco.prototype.__defineGetter__("Permission", function() {
      return Permission;
    });

    return Crisco;

  })();

  module.exports = Crisco;

}).call(this);
