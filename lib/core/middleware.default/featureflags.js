// Generated by CoffeeScript 1.6.2
(function() {
  var _;

  _ = require("underscore");

  module.exports = function(CriscoModels, Aux, next) {
    var deny, resourceFF, resourceId, root, routeFF, v,
      _this = this;

    console.log("Running Feature Flag Middleware");
    deny = function() {
      return Aux.response.status(401).message("Not Authorized").send();
    };
    if ((root = CriscoModels.getRoot()) == null) {
      console.log("Cannot find root node. Denying...");
      return deny();
    } else {
      if ((root.configuration.featureFlags == null) || (Aux.routeInfo.featureFlags == null)) {
        console.log("Route " + Aux.req.originalUrl + " does not have featureFlags. Skipping...");
        return next();
      } else {
        resourceFF = root.configuration.featureFlags;
        routeFF = Aux.routeInfo.featureFlags;
        if (!_.intersection(Object.keys(resourceFF), routeFF).length === routeFF.length) {
          console.error("Root resource " + root.name + " does not contain all feature flags " + routeFF + ". Skipping...");
          return next();
        } else {
          resourceId = CriscoModels.getParam(root.alternateName);
          v = Aux.crisco.getMiddleware("verify:featureFlags");
          if (v == null) {
            console.log("Client did not register a verify:featureFlags callback. Skipping...");
            return next();
          } else {
            return v(CriscoModels, Aux, root.name, {
              _id: resourceId
            }, function(featureFlags) {
              console.log("Teacher feature flags", featureFlags);
              if (_.intersection(routeFF, featureFlags).length === routeFF.length) {
                return next();
              } else {
                return deny();
              }
            });
          }
        }
      }
    }
  };

}).call(this);
