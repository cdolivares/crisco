// Generated by CoffeeScript 1.6.2
(function() {
  var POST, myAsync, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require("underscore");

  myAsync = require("" + __dirname + "/../../../helpers/async");

  POST = (function() {
    function POST(crisco, r) {
      this.handler = __bind(this.handler, this);      this.__c = crisco;
      this.__r = r;
    }

    POST.prototype.handler = function(req, res, next) {
      var Aux, CriscoModel,
        _this = this;

      CriscoModel = req.__crisco.model;
      Aux = req.__crisco.aux;
      return this.__r.handler(CriscoModel, Aux, function(runDefault) {
        if (runDefault == null) {
          runDefault = false;
        }
        if (runDefault) {
          console.log("Running default POST handler...");
          return _this._default(CriscoModel, Aux, function() {});
        }
      });
    };

    POST.prototype._default = function(CriscoModel, Aux, next) {
      var body, childCollection, clientClbk, parent, parentCollection, targetNode, targets, tasks, unpack,
        _this = this;

      clientClbk = this.__c.getMiddleware("resource:default:post");
      if (clientClbk == null) {
        Aux.error("No default post logic supplied by client. Skipping...");
        return next();
      }
      targets = CriscoModel.targets();
      childCollection = targets[0];
      if (targets.length > 1) {
        parentCollection = CriscoModel.targets()[1];
      }
      if (parentCollection != null) {
        parent = {
          collection: parentCollection,
          id: CriscoModel.getParam(parentCollection)
        };
      } else {
        parent = null;
      }
      targetNode = CriscoModel.database.nodeManager.find(CriscoModel.targets()[0]);
      if (_.isArray(Aux.body)) {
        unpack = true;
        body = Aux.body;
      } else {
        unpack = false;
        body = [Aux.body];
      }
      tasks = _.map(body, function(e) {
        var child;

        child = {
          collection: childCollection,
          properties: e
        };
        return clientClbk.bind(clientClbk, CriscoModel, Aux, parent, child);
      });
      return myAsync.parallel(tasks, function(err, results) {
        var payload;

        if (err == null) {
          payload = {};
          payload["" + targetNode.alternateName] = unpack ? results[0] || {} : results;
          return Aux.res.send(200, {
            data: payload
          });
        }
      });
    };

    POST.prototype.__defineGetter__('route', function() {
      return this.__r.route;
    });

    return POST;

  })();

  module.exports = POST;

}).call(this);
