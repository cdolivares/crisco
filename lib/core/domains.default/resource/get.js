// Generated by CoffeeScript 1.6.2
(function() {
  var GET, async, myAsync,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require("async");

  myAsync = require("" + __dirname + "/../../../helpers/async");

  GET = (function() {
    /*
        Where a route object, r, is defined as:
        {
          tag: "routeTag"
          route: "/route"
          method: "GET|PUT|POST|DEL"
          handler: RouteFn
        }
    */
    function GET(crisco, r) {
      this._default = __bind(this._default, this);
      this.handler = __bind(this.handler, this);      this.__c = crisco;
      this.__r = r;
    }

    GET.prototype.handler = function(req, res, next) {
      var Aux, CriscoModel,
        _this = this;

      CriscoModel = req.__crisco.model;
      Aux = req.__crisco.aux;
      return this.__r.handler(CriscoModel, Aux, function(runDefault) {
        if (runDefault == null) {
          runDefault = false;
        }
        if (runDefault) {
          console.log("Running default GET handler...");
          return _this._default(CriscoModel, Aux, function() {});
        }
      });
    };

    /*
      Method: _default 
      
      Implementation lives here for now, but follows the
      same convention as any other CriscoMiddleware. No
      reason client can't override this functionality.
    */


    GET.prototype._default = function(CriscoModel, Aux, next) {
      var clientClbk, drivers, p, q, rootNode,
        _this = this;

      clientClbk = this.__c.getMiddleware("resource:default:get");
      if (clientClbk == null) {
        Aux.error("No default get logic supplied by client. Skipping...");
        return next();
      }
      rootNode = CriscoModel.getRoot();
      p = CriscoModel.getParam(rootNode.alternateName);
      if (p == null) {
        q = {};
        q["_" + Aux.me._type_ + "._id"] = Aux.me._id;
        q["_" + Aux.me._type_ + ".l"] = {
          $gt: 0
        };
        return CriscoModel.database.drivers["" + rootNode.name].find(q, function(err, result) {
          if (err != null) {
            Aux.error(err.stack);
            return Aux.response.status(500).message(err.message).send();
          } else {
            return Aux.response.success().raw(result).send();
          }
        });
      } else {
        drivers = CriscoModel.database.drivers;
        return drivers["" + rootNode.name].findById(p, function(err, result) {
          var arr, find, memo, nArr, previousCollection, targets;

          if (err != null) {
            return Aux.error(err);
          } else {
            targets = CriscoModel.targets();
            arr = targets.slice(0).reverse();
            nArr = arr.slice(arr.indexOf(rootNode.alternateName) + 1);
            memo = {};
            previousCollection = rootNode.alternateName;
            memo[previousCollection] = [result];
            find = function(memo, collection, callback) {
              var child, clbk, parent;

              clbk = function(err, docs) {
                previousCollection = collection;
                if (err != null) {
                  return callback(err, null);
                } else {
                  return callback(null, _.extend(memo, docs));
                }
              };
              parent = {
                collection: previousCollection,
                result: memo[previousCollection]
              };
              child = {
                collection: collection,
                id: CriscoModel.getParam(collection)
              };
              return clientClbk.call(clientClbk, CriscoModel, Aux, parent, child, clbk);
            };
            return async.reduce(nArr, memo, find, function(err, result) {
              var r;

              if (err == null) {
                r = _.pick(result, targets[0]);
                r = r[Object.keys(r).shift()];
                /*
                  Let's unpack the result of getChildren from
                  the namespaced model collection.
                */

                return Aux.response.success().raw(r).send();
              }
            });
          }
        });
      }
    };

    GET.prototype.__defineGetter__('route', function() {
      return this.__r.route;
    });

    return GET;

  })();

  module.exports = GET;

}).call(this);
