// Generated by CoffeeScript 1.6.2
(function() {
  var GET, async,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  async = require("async");

  GET = (function() {
    /*
        Where a route object is defined as:
        {
          tag: "routeTag"
          route: "/route"
          method: "GET|PUT|POST|DEL"
          handler: RouteFn
        }
    */
    function GET(crisco, r) {
      this._default = __bind(this._default, this);
      this.handler = __bind(this.handler, this);      this.__c = crisco;
      this.__r = r;
    }

    GET.prototype.handler = function(req, res, next) {
      var Aux, CriscoModel,
        _this = this;

      CriscoModel = req.__crisco.model;
      Aux = req.__crisco.aux;
      return this.__r.handler(CriscoModel, Aux, function(runDefault) {
        if (runDefault == null) {
          runDefault = false;
        }
        if (runDefault) {
          console.log("Running default GET handler...");
          return _this._default(CriscoModel, Aux, function() {});
        }
      });
    };

    /*
      Method: _default 
      
      Implementation lives here for now, but follows the
      same convention as any other CriscoMiddleware. No
      reason client can't override this functionality.
    */


    GET.prototype._default = function(CriscoModel, Aux, next) {
      var clientClbk, drivers, p, rootNode,
        _this = this;

      clientClbk = this.__c.getMiddleware("resource:default:get");
      if (clientClbk == null) {
        Aux.error("No default get logic supplied by client. Skipping...");
        return next();
      }
      rootNode = CriscoModel.getRoot();
      p = CriscoModel.getParam(rootNode.alternateName);
      drivers = CriscoModel.database.drivers;
      return drivers["" + rootNode.name].findById(p, function(err, result) {
        var arr, find, nArr;

        if (err != null) {
          return Aux.error(err);
        } else {
          arr = CriscoModel.targets().reverse();
          nArr = arr.slice(arr.indexOf(rootNode.alternateName));
          find = function(memo, collItem, callback) {
            var clbk, targets;

            targets = memo.shift();
            clbk = function(err, docs) {
              if (err != null) {
                return callback(err, null);
              } else {
                return callback(null, memo.push(docs));
              }
            };
            return clientClbk.call(clientClbk, CriscoModel, Aux, targets, collItem, clbk);
          };
          return async.reduce(nArr, [result], find, function(err, result) {
            return Aux.res.send(200, {
              data: result
            });
          });
        }
      });
    };

    GET.prototype.__defineGetter__('route', function() {
      return this.__r.route;
    });

    return GET;

  })();

  module.exports = GET;

}).call(this);
