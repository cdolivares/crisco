// Generated by CoffeeScript 1.6.2
(function() {
  var ActionCollector, ActionInitializer, AppInitializer, CriscoAction, CriscoAux, CriscoModel, Express, PrimitiveFactory, ResourceCollector, ResourceInitializer, RouteInitializer, SchemaInitializer;

  Express = require("express");

  /*
    Application Initializers
  */


  SchemaInitializer = require("" + __dirname + "/schema");

  RouteInitializer = require("" + __dirname + "/route");

  /*
    Action and Resource Collectors
  */


  ActionCollector = require("" + __dirname + "/../collectors/action");

  ResourceCollector = require("" + __dirname + "/../collectors/resource");

  /*
    Route Conditioners
  */


  ResourceInitializer = require("" + __dirname + "/../initializers.resource/resourceinit");

  ActionInitializer = require("" + __dirname + "/../initializers.action/actioninit");

  /*
    Primitive Factory
  */


  PrimitiveFactory = require("" + __dirname + "/../primitives/primitivefactory");

  /*
    Primitive Implementations
  */


  CriscoModel = require("" + __dirname + "/../primitives.model/model");

  CriscoAction = require("" + __dirname + "/../primitives.action/action");

  CriscoAux = require("" + __dirname + "/../primitives.aux/aux");

  AppInitializer = (function() {
    /*
      Method: constructor
    */
    function AppInitializer(crisco, actions, resources, schemas, plugins, dbSettings) {
      this.__a = actions;
      this.__r = resources;
      this.__s = schemas;
      this.__p = plugins;
      this.__dbSettings = dbSettings;
      this.__c = crisco;
      this.__initializers = {
        route: {}
      };
      this.__e = Express();
    }

    AppInitializer.prototype.init = function(clbk) {
      var _this = this;

      this.__initializers.schema = new SchemaInitializer(this.__s, this.__p, this.__dbSettings);
      return this.__initializers.schema.init(function(err) {
        var actionCollector, actionInitializer, db, primitiveFactory, resourceCollector, resourceInitializer;

        if (err != null) {
          console.error("Problem initializing the database");
          return console.error(err.message);
        } else {
          _this.__database = db = _this.__initializers.schema.database;
          /*
            Server configuration needs reference to database.
            Pass in here.
          */

          if (_this.__c.configuration["server"] != null) {
            _this.__c.configuration["server"](_this.__e, db);
          }
          primitiveFactory = _this._initializePrimitiveFactory();
          _this.__initializers.resource = resourceInitializer = new ResourceInitializer(_this.__c, db, primitiveFactory);
          _this.__initializers.action = actionInitializer = new ActionInitializer(_this.__c, db, primitiveFactory);
          resourceCollector = new ResourceCollector(_this.__c, _this.__e, resourceInitializer);
          actionCollector = new ActionCollector(_this.__e, actionInitializer);
          _this.__initializers.route.resource = new RouteInitializer(_this.__r, resourceCollector);
          _this.__initializers.route.action = new RouteInitializer(_this.__a, actionCollector);
          return _this.__initializers.route.resource.init(function(err) {
            if (err != null) {
              return clbk(err);
            } else {
              return _this.__initializers.route.action.init(function(err) {
                if (err != null) {
                  return clbk(err);
                } else {
                  console.log("Initializing resources...");
                  _this.__initializers.route.resource.enrich();
                  _this.__initializers.route.action.enrich();
                  return clbk(null, _this.__e);
                }
              });
            }
          });
        }
      });
    };

    /*
      Private Method: _initializePrimitiveFactory
    */


    AppInitializer.prototype._initializePrimitiveFactory = function() {
      var a, c, domainConfigs, n, primitiveFactory, r, _ref, _ref1, _ref2, _results;

      domainConfigs = {
        resource: {},
        action: {}
      };
      _ref = this.__r;
      for (n in _ref) {
        r = _ref[n];
        domainConfigs.resource[n] = r.serialize();
      }
      _ref1 = this.__a;
      for (n in _ref1) {
        a = _ref1[n];
        domainConfigs.action[n] = a.serialize();
      }
      primitiveFactory = new PrimitiveFactory(this.__c, domainConfigs, this.__database);
      primitiveFactory.registerPrimitive("CriscoModel", CriscoModel);
      primitiveFactory.registerPrimitive("CriscoAction", CriscoAction);
      primitiveFactory.registerPrimitive("CriscoAux", CriscoAux);
      return primitiveFactory;
      this.__g.init();
      _ref2 = this.__g.get();
      _results = [];
      for (n in _ref2) {
        c = _ref2[n];
        _results.push(this.__serializedConfigs[n] = c.serialize());
      }
      return _results;
    };

    return AppInitializer;

  })();

  module.exports = AppInitializer;

}).call(this);
