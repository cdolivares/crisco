// Generated by CoffeeScript 1.6.2
/*
  Default Resourceful Implementations
*/


(function() {
  var DefaultDel, DefaultGet, DefaultPost, DefaultPut, MWareTransformer, MiddlewareWrapper, ResourceDomain;

  DefaultGet = require("" + __dirname + "/../domains.default/resource/get");

  DefaultPut = require("" + __dirname + "/../domains.default/resource/put");

  DefaultPost = require("" + __dirname + "/../domains.default/resource/post");

  DefaultDel = require("" + __dirname + "/../domains.default/resource/del");

  /*
    Crisco Middleware Wrapper
  */


  MiddlewareWrapper = require("" + __dirname + "/../middleware/criscowrapper");

  /*
    Helpers
  */


  MWareTransformer = require("" + __dirname + "/../../helpers/middleware");

  /*
    Class: ResourceDomain
  
    Responsible for configuring an express
    server instance with a single resource
    domain.
  */


  ResourceDomain = (function() {
    /*
      Method: constructor
    
      @param - express - instance of express
      @param - config - An object describing a 
               resource domain.
               See resource/base for more information.
      @param - database - An instance of dojodatabase
               that provides access to the application
               datastore as well as convenience methods
               for extracting our model dependencies.
        {
          domain: "resourceDomain Name",
          beforeHooks: {"hookName": "opts"},
          afterHooks: {"hookName": "opts"},
          routes: <a route object>,
          m: {"mName": mObject}
        }
    
        Where a route object is defined as:
        {
          tag: "routeTag"
          route: "/route"
          method: "GET|PUT|POST|DEL"
          handler: RouteFn
        }
    */
    function ResourceDomain(express, config, resourceInitializer) {
      this.__e = express;
      this.__c = config;
      this.__rInit = resourceInitializer;
    }

    ResourceDomain.prototype.enrich = function() {
      var afterHooks, args, beforeHooks, clbk, fn, r, routeHandler, routeKeyedAfter, routeKeyedBefore, wrappedAfterHooks, wrappedBeforeHooks, _i, _len, _ref, _ref1, _results,
        _this = this;

      routeKeyedBefore = MWareTransformer.transform(this.__c.beforeHooks);
      routeKeyedAfter = MWareTransformer.transform(this.__c.afterHooks);
      _ref = this.__c.routes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        beforeHooks = routeKeyedBefore[r.tag] || routeKeyedBefore["default"];
        afterHooks = routeKeyedAfter[r.tag] || routeKeyedAfter["default"];
        _ref1 = this._constructRouteHandler(r), fn = _ref1[0], routeHandler = _ref1[1];
        clbk = function(req, res) {};
        beforeHooks = _.filter(_.map(beforeHooks, function(n) {
          return _this.__c.m[n];
        }), function(z) {
          return _.isFunction(z);
        });
        afterHooks = _.filter(_.map(afterHooks, function(n) {
          return _this.__c.m[n];
        }), function(z) {
          return _.isFunction(z);
        });
        wrappedBeforeHooks = _.map(beforeHooks, function(bh) {
          var z;

          z = new MiddlewareWrapper(bh);
          return z.handler();
        });
        wrappedAfterHooks = _.map(afterHooks, function(ah) {
          var z;

          z = new MiddlewareWrapper(ah);
          return z.handler();
        });
        args = [routeHandler.route].concat(this.__rInit.get(this.__c.domain)).concat(wrappedBeforeHooks).concat([routeHandler.handler]).concat(wrappedAfterHooks).concat([clbk]);
        _results.push(fn.apply(this.__e, args));
      }
      return _results;
    };

    ResourceDomain.prototype._constructRouteHandler = function(r) {
      var d, fn;

      switch (r.method) {
        case "GET":
          fn = this.__e.get;
          d = new DefaultGet(r);
          break;
        case "POST":
          fn = this.__e.post;
          d = new DefaultPost(r);
          break;
        case "PUT":
          fn = this.__e.put;
          d = new DefaultPut(r);
          break;
        case "DEL":
          fn = this.__e["delete"];
          d = new DefaultDel(r);
          break;
        default:
          console.error("Invalid HTTP Route " + routeDef.method + " for " + routeDef.route);
          return [];
      }
      return [fn, d];
    };

    return ResourceDomain;

  })();

  module.exports = ResourceDomain;

}).call(this);
