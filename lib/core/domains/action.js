// Generated by CoffeeScript 1.6.3
/*
  Crisco Middleware Wrapper
*/


(function() {
  var ActionDomain, DefaultAction, MWareTransformer, MiddlewareWrapper;

  MiddlewareWrapper = require("" + __dirname + "/../middleware/criscowrapper");

  /*
    Helpers
  */


  MWareTransformer = require("" + __dirname + "/../../helpers/middleware");

  DefaultAction = require("" + __dirname + "/../domains.default/action/action");

  /*
    Class: ActionDomain
  
    Responsible for configuring an express
    server instance with a single action
    domain.
  */


  ActionDomain = (function() {
    /*
      Method: constructor
    
      @param - crisco - an instance of the crisco
               application
      @param - express - instance of express
      @param - config - An object describing a 
               resource domain.
               See resource/base for more information.
      @param - resourceInitializer - A Getter class
               that returns an array of express compliant
               middleware that initializes our Crisco
               primitives.
        {
          domain: "resourceDomain Name",
          beforeHooks: {"hookName": "opts"},
          afterHooks: {"hookName": "opts"},
          routes: <a route object>,
          m: {"mName": mObject}
        }
    
        Where a route object is defined as:
        {
          tag: "routeTag"
          route: "/route"
          method: "GET|PUT|POST|DEL"
          handler: RouteFn
        }
    */

    function ActionDomain(crisco, express, config, actionInitializer) {
      this.__c = crisco;
      this.__e = express;
      this.__config = config;
      this.__aInit = actionInitializer;
    }

    ActionDomain.prototype.enrich = function() {
      var afterHooks, args, beforeHooks, clbk, defaultAction, fn, r, routeKeyedAfter, routeKeyedBefore, wrappedAfterHooks, wrappedBeforeHooks, _i, _len, _ref, _results,
        _this = this;
      routeKeyedBefore = MWareTransformer.transform(this.__config.beforeHooks);
      routeKeyedAfter = MWareTransformer.transform(this.__config.afterHooks);
      _ref = this.__config.routes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        beforeHooks = routeKeyedBefore[r.tag] || routeKeyedBefore["default"];
        afterHooks = routeKeyedAfter[r.tag] || routeKeyedAfter["default"];
        fn = this._constructRouteHandler(r);
        defaultAction = new DefaultAction(r);
        clbk = function(req, res, next) {};
        beforeHooks = _.filter(_.map(beforeHooks, function(n) {
          return _this.__config.m[n];
        }), function(z) {
          return _.isFunction(z);
        });
        afterHooks = _.filter(_.map(afterHooks, function(n) {
          return _this.__config.m[n];
        }), function(z) {
          return _.isFunction(z);
        });
        wrappedBeforeHooks = _.map(beforeHooks, function(bh) {
          var z;
          z = new MiddlewareWrapper(bh);
          return z.handler();
        });
        wrappedAfterHooks = _.map(afterHooks, function(ah) {
          var z;
          z = new MiddlewareWrapper(ah);
          return z.handler();
        });
        args = [defaultAction.route].concat(this.__aInit.get(this.__config.domain, r)).concat(wrappedBeforeHooks).concat([defaultAction.handler]).concat(wrappedAfterHooks).concat([clbk]);
        _results.push(fn.apply(this.__e, args));
      }
      return _results;
    };

    ActionDomain.prototype._constructRouteHandler = function(r) {
      var fn;
      switch (r.method) {
        case "GET":
          fn = this.__e.get;
          break;
        case "POST":
          fn = this.__e.post;
          break;
        case "PUT":
          fn = this.__e.put;
          break;
        case "DEL":
          fn = this.__e["delete"];
          break;
        default:
          console.error("Invalid HTTP Route " + routeDef.method + " for " + routeDef.route);
          return [];
      }
      return fn;
    };

    return ActionDomain;

  })();

  module.exports = ActionDomain;

}).call(this);
